# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
variables:
  OUTPUT_PATH: android\app\build\outputs\apk\release\app-release.apk
  CMS_MOBILE_SVN_PATH: /Volumes/i3_Software/CMS\ Web/C_CMS Mobile

stages:          # List of stages for jobs, and their order of execution
  - build

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  only:
    - v3.3.0
    - staging
    - merge_requests
  before_script:
    # - echo "${CI_PROJECT_ID}"
    # - echo "Yarn install..."
    # - yarn
  script:
    - echo "Building apk file..."
    # - cd .\android
    # - .\gradlew clean
    # - .\gradlew assembleRelease
    # - cd ..
    - echo "Build complete."
  after_script:
    # - xcopy /y /s /r $OUTPUT_PATH $EXPORT_FOLDER_DEST
    - cd src/consts                                                                                             # cd to consts directory to read appInfo.js file
    - BUILD_NUMBER_IN_FILE=$(grep -E "Version:" "appInfo.js")                                                   # find string match within "Version:"
    - BUILD_NUMBER=$(echo "${BUILD_NUMBER_IN_FILE//[^\w0-9.]/}")                                                # replace string found with regex to take the correct build number
    - VERSION=($(echo $BUILD_NUMBER | cut -d "." -f 1).$(echo $BUILD_NUMBER | cut -d "." -f 2))                 # split the build number string to take the version at the start of the build number
    - cd $CMS_MOBILE_SVN_PATH
    - if [ ! -d $VERSION ]; then mkdir $VERSION; fi;                                                            # check if the version directory exist, if not make a new one
    - cd $VERSION
    - mkdir "v$VERSION"
  # artifacts:
  #   expire_in: 1 week
  #   paths:
  #     - $OUTPUT_PATH
  #     - $IN_FILE
